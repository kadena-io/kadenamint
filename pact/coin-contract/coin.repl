; https://github.com/kadena-io/chainweb-node/blob/ba8663f9c81437cac86cf5bb95ccd06563c8d230/pact/coin-contract/coin.repl#L9-L54

(verify 'coin)

(env-data { "k1" : ["keys1"], "k2": ["keys2"], "k3": ["keys3"] })
(env-keys ["keys1", "keys2", "keys3", "keys4"])
(define-keyset 'k1 (read-keyset "k1"))
(define-keyset 'k2 (read-keyset "k2"))
(define-keyset 'k3 (read-keyset "k3"))

(use coin)

; account balance for k1 does not exist, because account does not exist yet
(expect-failure "account does not exist yet" (account-balance 'k1))

; create accounts should succeed and initialize with correct amounts and guards
(create-account 'k1 (read-keyset 'k1))
(create-account 'k2 (read-keyset 'k2))
(expect "initial balance at 0.0" 0.0 (account-balance 'k1))
(expect "account-info reflects the correct balance and guard information"
  {"balance": 0.0, "guard": (read-keyset 'k2)} (account-info 'k2))

; debits should fail on empty accounts and succeed on non-empty
; credits should succeed. Both should reflect the correct balance
(expect-failure "credit should fail when TRANSFER is not in scope" (credit 'k1 (read-keyset 'k1) 1.0))
(expect-failure "debit should fail when TRANSFER is not in scope" (debit 'k1 1.0))
(test-capability (TRANSFER))
(expect-failure "debit not > 0.0 quantities fail fast" (debit 'k1 0.0))
(expect-failure "debit not > 0.0 quantities fail fast" (debit 'k1 (- 1.0)))
(expect-failure "debit from account with 0.0 in it yields failure" (debit 'k1 1.0))
(credit 'k1 (read-keyset 'k1) 1.0)
(expect "account balance reflects credit" 1.0 (account-balance 'k1))
(debit 'k1 1.0)
(expect "debiting funds now succeeds when there's enough funds" 0.0 (account-balance 'k1))
;crediting non-existing accounts with guard should have supplied keys
(credit 'k3 (read-keyset 'k3) 1.0)
